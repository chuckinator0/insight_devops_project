#!/bin/sh
#
# Init file for <%= @daemon_name.capitalize %>
#
# chkconfig: 345 20 80
# description: <%= @daemon_name %> daemon
# pidfile: /var/run/<%= @daemon_name %>.pid

NAME=<%= @daemon_name %>
USER=<%= @user %>
PIDFILE=/var/run/$NAME.pid
NOHUP=$(which nohup)
RETVAL=0

# Source function library
[ -f /etc/init.d/functions ] && . /etc/init.d/functions

# Source networking configuration
[ -f /etc/sysconfig/network ] && . /etc/sysconfig/network

# Load additional configuration
[ -f <%= @env_path %> ] && . <%= @env_path %>

# Check that networking is up
[ "$NETWORKING" = "no" ] && exit $RETVAL

<%= render 'partials/check_running.erb', variables: {user: @user} -%>

ensure_pid() {
  [ ! -e "$PIDFILE" ] && touch $PIDFILE && chown $USER $PIDFILE
}

start() {
  ensure_pid
  <% if @ulimit %>
  ulimit -n <%= @ulimit %>
  <% end %>
  action "Starting $NAME" daemon --user=$USER --pidfile=$PIDFILE "$NOHUP $KAFKA_RUN $KAFKA_ARGS $KAFKA_CONFIG > /dev/null 2>&1 & echo \$! > $PIDFILE"
  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then
    check_running
    RETVAL=$?
  fi
  return $RETVAL
}

stop() {
  <% if controlled_shutdown_enabled? %>
  local pid;
  if [ -e "$PIDFILE" ]; then pid=$(cat "$PIDFILE"); fi
  echo -n "Stopping $NAME "
  if checkpid $pid; then
    kill -TERM $pid > /dev/null 2>&1;
    RETVAL=$?
    if (( $RETVAL == 0 )); then
      while checkpid $pid; do sleep 1; done
      success
    else
      failure
    fi
  else
    success
  fi
  echo
  rm -f "$PIDFILE"
  <% else %>
  action "Stopping $NAME" killproc -p "$PIDFILE" -d <%= @kill_timeout %> "$NAME"
  RETVAL=$?
  <% end %>
  return $RETVAL
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  status)
    status -p $PIDFILE $NAME
    RETVAL=$?
    ;;
  *)
    echo "Usage: $NAME {start|stop|restart|status}" >&2
    RETVAL=3
    ;;
esac

exit $RETVAL
